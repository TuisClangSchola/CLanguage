// Part16 : ポインタ / 参照

#include <stdio.h>		// C言語標準のインクルードファイル


	// ---------------------------
// 普通の引数を持つ関数
void FuncA(int a);
// 配列の引数を持つ関数
void FuncA(int a[], int num);

// ポインタ引数を持つ関数
void FuncB(int* a);

// 参照引数を持つ関数
void FuncC(int& a);


// プログラムコードの出力大本
int main()
{
	/*
	今回の内容はポインタと参照についてです。
	*/
	/* 
	※図解を用いた詳しいポインタ解説は行いません。自分で勉強してください。申し訳ありません。
	　また、アドレス値という新用語を使わずポインタ位置という書き方をしています。
	*/ 


	// -----------------------------------------------------------------------------------------------
	// ポインタはC言語にとって特有のものであり大事なものです。

	// また、ポインタは気づいていないだけで皆さんはすでに配列を勉強している最中に触れています。
	int pointer_A[] = { 0,1,2,3,4,5,6,7,8,9 };
	printf("何もしていない: %d\n", pointer_A[0]);
	FuncA(pointer_A[0]);
	printf("普通の関数に渡して中身を変えたつもり: %d\n", pointer_A[0]);
	FuncA(pointer_A, 0);
	printf("配列を関数に渡して中身を変えた: %d\n", pointer_A[0]);


	// 上のように配列を渡した関数では中身が変えられました。
	// その理由はポインタの中身自体を調整されたことによります。



	// -----------------------------------------------------------------------------------------------
	// では基本となるポインタの記述はどのようになるかというと以下のようになります。
	int* pointer_B = NULL;

	// ポインタでは大事なことですが宣言した際には「NULL」を入れるようにしてください。
	
	// ポインタと思ってビビらないでください。配列の0番目だと思って扱えばいいんです。

	// ポインタの使い方は以下のようなものがあります。見て覚えてください。
	

	// 例１------------------------------------------------------------------
	int pointer_C = 10;			// Cを10として初期化宣言
	pointer_B = &pointer_C;		// Cのポインタ位置をBに渡す
	*pointer_B = 200;			// Cのポインタ位置の内容を変更する

	printf("ポインタ位置の内容を変更されてしまったC: %d\n", pointer_C);

	/*
	ここではpointer_Cを弄っていませんが中身が変更されてしまいました。
	それはpointer_Cに該当していたポインタ位置の内容を直接変更されてしまったためです。
	このようにある変数の中身をポインタ位置から変更したものです。
	*/
	// ----------------------------------------------------------------------



	// 例２------------------------------------------------------------------
	int pointer_D = 10;
	printf("何もしていないとき: %d\n", pointer_D);
	FuncB(&pointer_D);
	printf("ポインタ引数に渡したとき: %d\n", pointer_D);
	FuncC(pointer_D);
	printf("参照引数に渡したとき: %d\n", pointer_D);

	/*
	どちらもやっている処理としてはポインタ位置を調整する形をとっています。
	また、ポインタ引数でも参照引数でもアセンブリコードから確認してもやっていることは同じことです。
	つまり処理は全く同じことをしています。
	*/
	// ----------------------------------------------------------------------



	return 0;						// 正常終了確認処理
}


// ---------------------------------------------------
void FuncA(int a)
{
	a = 10;
}

void FuncA(int a[], int num)
{
	a[num] = 10;
}

void FuncB(int* a)
{
	*a = 100;
}

void FuncC(int& a)
{
	a = 200;
}